name: release

on:
  schedule:
    - cron: "0 * * * *"
  workflow_dispatch:
    inputs:
      version:
        description: "Nimbus version to build"
        required: true
        type: string

jobs:
  version:
    if: ${{ inputs.version == '' }}
    runs-on: ubuntu-latest
    outputs:
      isNew: ${{ steps.check-new-version.outputs.isNew }}
      version: ${{ steps.fetch-latest-release.outputs.version }}

    steps:
      - name: Fetch latest release
        id: fetch-latest-release
        run: |
          VERSION=$(curl -f --retry 5 --retry-all-errors https://api.github.com/repos/status-im/nimbus-eth2/releases/latest | jq -r '.tag_name')
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Check if new version
        id: check-new-version
        run: |
          IS_NEW=$(docker buildx imagetools inspect ghcr.io/${{ github.repository }}:${{ steps.fetch-latest-release.outputs.version }} >/dev/null 2>&1 && echo false || echo true)
          echo "isNew=${IS_NEW}" >> $GITHUB_OUTPUT

      - name: Print information
        run: |
          echo "Latest release found: ${{ steps.fetch-latest-release.outputs.version }}"
          echo "Found version is new: ${{ steps.check-new-version.outputs.isNew }}"

  build:
    # The binary needs to be built in the same Docker image used as base
    # in the final image in order to link the right dependencies.
    container: debian:bullseye-slim
    defaults:
      run:
        shell: bash

    runs-on: ubuntu-latest
    strategy:
      matrix:
        variant:
          - linux/amd64
          - linux/arm64

    if: always() && needs.version.result != 'failed' && (github.event_name != 'schedule' || needs.version.outputs.isNew == 'true')
    needs: version
    env:
      VERSION: ${{ inputs.version || needs.version.outputs.version }}

    steps:
      - name: Install dependencies in build container
        run: |
          apt update
          apt install -y git build-essential

      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: status-im/nimbus-eth2
          ref: ${{ env.VERSION }}
          submodules: recursive

      - name: Build binaries
        run: |
          # Change repo owner, as it otherwise causes git safe.directory issues for some reason
          chown -R root: .

          # Configuration
          DEPENDENCIES=${{ fromJson('{ "linux/arm64": "gcc-aarch64-linux-gnu" }')[matrix.variant] }}
          NIMFLAGS_COMMON="-d:const_preset=gnosis -d:disableMarchNative --gcc.options.debug:'-g1' --clang.options.debug:'-gline-tables-only'"
          BINARIES="nimbus_beacon_node"

          # Install cross-compile dependencies
          [ ! -z $DEPENDENCIES ] && apt install -y $DEPENDENCIES

          # Build Nim
          make update -j$(nproc)

          # Build the client for the given platform
          if [[ "${{ matrix.variant }}" == "linux/amd64" ]]; then
            make \
              LOG_LEVEL=TRACE \
              NIMFLAGS="${NIMFLAGS_COMMON}" \
              PARTIAL_STATIC_LINKING=1 \
              QUICK_AND_DIRTY_COMPILER=1 \
              ${BINARIES}
          elif [[ "${{ matrix.variant }}" == "linux/arm64" ]]; then
            CC="aarch64-linux-gnu-gcc"
            
            make \
              -j$(nproc) \
              USE_LIBBACKTRACE=0 \
              QUICK_AND_DIRTY_COMPILER=1 \
              deps-common build/generate_makefile

            make \
              LOG_LEVEL="TRACE" \
              CC="${CC}" \
              NIMFLAGS="${NIMFLAGS_COMMON} --cpu:arm64 --gcc.exe=${CC} --gcc.linkerexe=${CC}" \
              PARTIAL_STATIC_LINKING=1 \
              ${BINARIES}
          else
            echo "Unsupported platform"
            exit 1
          fi

      - name: String manipulation
        id: artifact
        run: |
          NAME=${{ matrix.variant }}
          echo "name=${NAME//\//-}" >> $GITHUB_OUTPUT

      - name: Upload binary as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact.outputs.name }}
          path: ./build

  package:
    runs-on: ubuntu-latest

    if: always() && needs.build.result == 'success' && (github.event_name != 'schedule' || needs.version.outputs.isNew == 'true')
    needs: [version, build]
    env:
      VERSION: ${{ inputs.version || needs.version.outputs.version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern=v{{version}},value=${{ env.VERSION }}
            type=semver,pattern=v{{major}}.{{minor}},value=${{ env.VERSION }}
            type=semver,pattern=v{{major}},value=${{ env.VERSION }}
            type=raw,value=${{ env.VERSION }},enable=${{ github.event_name != 'schedule' }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/arm64/v8,linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
